import { Context } from 'telegraf';
import { DatabaseService } from '../services/database';
import { MasterReply, ReplySession } from '../types';
import Logger from '../utils/logger';

interface ReplyCommandContext extends Context {
  database?: DatabaseService;
  logger?: Logger;
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –æ—Ç–≤–µ—Ç–æ–≤
export const replySessions: { [masterId: number]: ReplySession } = {};

export async function replyCommand(ctx: ReplyCommandContext): Promise<void> {
  if (!ctx.from) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  const masterId = ctx.from.id;
  const masterChatId = process.env.MASTER_CHAT_ID;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑—ã–≤–∞–µ—Ç –º–∞—Å—Ç–µ—Ä
  if (masterChatId && masterId.toString() !== masterChatId) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    return;
  }

  const text = ctx.message && 'text' in ctx.message ? ctx.message.text : '';
  
  // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /reply <clientId> [requestId]
  const match = text.match(/^\/reply\s+(\d+)(?:\s+(\d+))?/);
  
  if (!match) {
    await ctx.reply(`üí¨ <b>–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É</b>

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
<code>/reply &lt;ID_–∫–ª–∏–µ–Ω—Ç–∞&gt; [ID_–∑–∞–ø—Ä–æ—Å–∞]</code>

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
<code>/reply 123456789</code> - –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É —Å ID 123456789
<code>/reply 123456789 5</code> - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å #5 –∫–ª–∏–µ–Ω—Ç—É 123456789

<b>–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã:</b>
1. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
3. –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç –≤–∞—à –æ—Ç–≤–µ—Ç`, { 
      parse_mode: 'HTML' 
    });
    return;
  }

  const clientId = parseInt(match[1]!);
  const requestId = match[2] ? parseInt(match[2]) : undefined;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    const client = await ctx.database?.getUser(clientId);
    if (!client) {
      await ctx.reply(`‚ùå –ö–ª–∏–µ–Ω—Ç —Å ID ${clientId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      return;
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω requestId, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    if (requestId) {
      const request = await ctx.database?.getTattooRequestById(requestId);
      if (!request) {
        await ctx.reply(`‚ùå –ó–∞–ø—Ä–æ—Å #${requestId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –æ—Ç–≤–µ—Ç–∞
    replySessions[masterId] = {
      step: 'waiting_for_message',
      data: {
        clientId: clientId,
        clientInfo: {
          id: client.id,
          username: client.username || undefined,
          firstName: client.firstName || undefined,
          lastName: client.lastName || undefined
        },
        requestId: requestId
      }
    };

    const clientName = `${client.firstName || ''} ${client.lastName || ''}`.trim() || 
                      client.username || 
                      `ID: ${client.id}`;

    await ctx.reply(`üí¨ <b>–û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${clientName}
${requestId ? `üìù <b>–ó–∞–ø—Ä–æ—Å:</b> #${requestId}` : ''}

<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:</b>

<i>–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É</i>`, { 
      parse_mode: 'HTML' 
    });

    if (ctx.logger) {
      ctx.logger.info('Reply session started', {
        masterId,
        clientId,
        requestId
      });
    }

  } catch (error) {
    console.error('Error starting reply session:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞');
  }
}

export async function handleReplyCallback(ctx: ReplyCommandContext): Promise<void> {
  if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
    return;
  }

  const data = ctx.callbackQuery.data;
  const masterId = ctx.from?.id;

  if (!masterId) {
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
  if (data.startsWith('reply_')) {
    const parts = data.split('_');
    if (parts.length >= 3) {
      const clientId = parseInt(parts[1]!);
      const requestId = parseInt(parts[2]!);

      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        const client = await ctx.database?.getUser(clientId);
        if (!client) {
          await ctx.answerCbQuery('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
        }

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –æ—Ç–≤–µ—Ç–∞
        replySessions[masterId] = {
          step: 'waiting_for_message',
          data: {
            clientId: clientId,
            clientInfo: {
              id: client.id,
              username: client.username || undefined,
              firstName: client.firstName || undefined,
              lastName: client.lastName || undefined
            },
            requestId: requestId
          }
        };

        const clientName = `${client.firstName || ''} ${client.lastName || ''}`.trim() || 
                          client.username || 
                          `ID: ${client.id}`;

        await ctx.editMessageText(`üí¨ <b>–û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${clientName}
üìù <b>–ó–∞–ø—Ä–æ—Å:</b> #${requestId}

<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:</b>

<i>–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É</i>`, { 
          parse_mode: 'HTML' 
        });

        await ctx.answerCbQuery('‚úÖ –ì–æ—Ç–æ–≤ –∫ –æ—Ç–≤–µ—Ç—É');

        if (ctx.logger) {
          ctx.logger.info('Reply session started via callback', {
            masterId,
            clientId,
            requestId
          });
        }

      } catch (error) {
        console.error('Error starting reply session via callback:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞');
      }
    }
  }
}

export async function handleReplyText(ctx: ReplyCommandContext): Promise<void> {
  if (!ctx.from || !('text' in ctx.message!)) {
    return;
  }

  const masterId = ctx.from.id;
  const session = replySessions[masterId];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –æ—Ç–≤–µ—Ç–∞
  if (session && session.step === 'waiting_for_message') {
    const message = ctx.message.text;
    
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      if (ctx.database) {
        const replyData: Omit<MasterReply, 'id' | 'createdAt'> = {
          requestId: session.data.requestId || 0,
          clientId: session.data.clientId,
          masterId: masterId,
          message: message
        };

        const replyId = await ctx.database.saveMasterReply(replyData);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await sendReplyToClient(ctx, session.data.clientId, message, replyId);
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        delete replySessions[masterId];
        
        await ctx.reply('‚úÖ <b>–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É!</b>\n\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.', { 
          parse_mode: 'HTML' 
        });

        if (ctx.logger) {
          ctx.logger.info('Reply sent to client', {
            replyId,
            masterId,
            clientId: session.data.clientId,
            requestId: session.data.requestId
          });
        }
      } else {
        throw new Error('Database service not available');
      }
    } catch (error) {
      console.error('Error sending reply:', error);
      await ctx.reply('‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', { 
        parse_mode: 'HTML' 
      });
    }
  }
}

async function sendReplyToClient(ctx: ReplyCommandContext, clientId: number, message: string, replyId: number): Promise<void> {
  try {
    const masterMessage = `üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –º–∞—Å—Ç–µ—Ä–∞</b>

${message}

---
<i>–≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Ç–∞—Ç—É-—Å–∞–ª–æ–Ω–µ. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /request</i>`;

    await ctx.telegram.sendMessage(clientId, masterMessage, { 
      parse_mode: 'HTML' 
    });

    if (ctx.logger) {
      ctx.logger.info('Reply delivered to client', {
        replyId,
        clientId
      });
    }
  } catch (error) {
    console.error('Error delivering reply to client:', error);
    throw error;
  }
}
