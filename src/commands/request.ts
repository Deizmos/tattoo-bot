import { Context } from 'telegraf';
import { DatabaseService } from '../services/database';
import { TattooRequest } from '../types';
import Logger from '../utils/logger';

interface RequestCommandContext extends Context {
  database?: DatabaseService;
  logger?: Logger;
}

export async function requestCommand(ctx: RequestCommandContext): Promise<void> {
  if (!ctx.from) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  const userId = ctx.from.id;
  const userInfo = ctx.from;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  const sessionKey = `request_${userId}`;
  const currentSession = (ctx as any).session?.[sessionKey];

  if (currentSession && currentSession.step) {
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    await handleRequestStep(ctx, currentSession);
    return;
  }

  // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  const welcomeMessage = `üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ç–∞—Ç—É–∏—Ä–æ–≤–∫—É</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∏. –í–∫–ª—é—á–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:

üìù <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ:</b>
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–π —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∏
‚Ä¢ –°—Ç–∏–ª—å (—Ä–µ–∞–ª–∏–∑–º, –º–∏–Ω–∏–º–∞–ª–∏–∑–º, –æ–ª–¥—Å–∫—É–ª, –∏ —Ç.–¥.)
‚Ä¢ –†–∞–∑–º–µ—Ä (–º–∞–ª–µ–Ω—å–∫–∞—è, —Å—Ä–µ–¥–Ω—è—è, –±–æ–ª—å—à–∞—è)
‚Ä¢ –ú–µ—Å—Ç–æ –Ω–∞ —Ç–µ–ª–µ
‚Ä¢ –ë—é–¥–∂–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è)

üì∏ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚Ä¢ –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã
‚Ä¢ –£–∫–∞–∑–∞—Ç—å –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –º–∞—Å—Ç–µ—Ä—É!`;

  await ctx.reply(welcomeMessage, { parse_mode: 'HTML' });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
  if (!(ctx as any).session) {
    (ctx as any).session = {};
  }
  (ctx as any).session[sessionKey] = {
    step: 'waiting_for_description',
    data: {
      userId,
      userInfo: {
        id: userInfo.id,
        username: userInfo.username,
        firstName: userInfo.first_name,
        lastName: userInfo.last_name
      }
    }
  };

  console.log('Session initialized:', (ctx as any).session[sessionKey]);
}

async function handleRequestStep(ctx: RequestCommandContext, session: any): Promise<void> {
  const { step, data } = session;

  if (step === 'waiting_for_description') {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    if (!('text' in ctx.message!)) {
      await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∏');
      return;
    }

    const description = ctx.message.text;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é
    data.description = description;
    session.step = 'waiting_for_confirm';
    (ctx as any).session[`request_${data.userId}`] = session;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∑–∞–ø—Ä–æ—Å–∞
    const previewMessage = `üìã <b>–ü—Ä–µ–≤—å—é –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${data.userInfo.firstName} ${data.userInfo.lastName || ''} ${data.userInfo.username ? `(@${data.userInfo.username})` : ''}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
${description}

‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞ –º–∞—Å—Ç–µ—Ä—É?</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.`;

    await ctx.reply(previewMessage, { 
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å', callback_data: 'confirm_request' },
            { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_request' }
          ]
        ]
      }
    });
  }
}

export async function handleRequestCallback(ctx: RequestCommandContext): Promise<void> {
  if (!('callback_query' in ctx.update) || !ctx.from || !ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
    return;
  }

  const callbackData = ctx.callbackQuery.data;
  const userId = ctx.from.id;
  const sessionKey = `request_${userId}`;
  const session = (ctx as any).session?.[sessionKey];

  if (!session || !session.data) {
    await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /request');
    return;
  }

  if (callbackData === 'confirm_request') {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const requestData: Omit<TattooRequest, 'id' | 'createdAt' | 'updatedAt'> = {
        userId: session.data.userId,
        description: session.data.description,
        status: 'pending'
      };

      if (ctx.database) {
        const requestId = await ctx.database.saveTattooRequest(requestData);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –º–∞—Å—Ç–µ—Ä—É
        await sendRequestToMaster(ctx, session.data, requestId);
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        delete (ctx as any).session[sessionKey];
        
        await ctx.answerCbQuery('‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–∞—Å—Ç–µ—Ä—É!');
        await ctx.editMessageText('‚úÖ <b>–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –º–∞—Å—Ç–µ—Ä—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üé®', { 
          parse_mode: 'HTML' 
        });
      } else {
        throw new Error('Database service not available');
      }
    } catch (error) {
      console.error('Error saving request:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞');
      await ctx.editMessageText('‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /request', { 
        parse_mode: 'HTML' 
      });
    }
  } else if (callbackData === 'cancel_request') {
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    delete (ctx as any).session[sessionKey];
    
    await ctx.answerCbQuery('‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω');
    await ctx.editMessageText('‚ùå <b>–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /request –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.', { 
      parse_mode: 'HTML' 
    });
  }
}

async function sendRequestToMaster(ctx: RequestCommandContext, requestData: any, requestId: number): Promise<void> {
  // ID –º–∞—Å—Ç–µ—Ä–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const masterChatId = process.env.MASTER_CHAT_ID;
  
  if (!masterChatId) {
    console.error('MASTER_CHAT_ID not configured');
    return;
  }

  const masterMessage = `üé® <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–∞—Ç—É–∏—Ä–æ–≤–∫—É #${requestId}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
‚Ä¢ –ò–º—è: ${requestData.userInfo.firstName} ${requestData.userInfo.lastName || ''}
‚Ä¢ Username: ${requestData.userInfo.username ? `@${requestData.userInfo.username}` : '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ ID: ${requestData.userId}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>
${requestData.description}

üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> ${new Date().toLocaleString('ru-RU')}

üí¨ <b>–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>
<code>–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${requestData.userId}: –≤–∞—à –æ—Ç–≤–µ—Ç</code>`;

  try {
    await ctx.telegram.sendMessage(masterChatId, masterMessage, { 
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { 
              text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É', 
              url: `https://t.me/${ctx.botInfo?.username}?start=reply_${requestData.userId}` 
            }
          ]
        ]
      }
    });

    if (ctx.logger) {
      ctx.logger.info('Request sent to master', {
        requestId,
        userId: requestData.userId,
        masterChatId
      });
    }
  } catch (error) {
    console.error('Error sending message to master:', error);
    if (ctx.logger) {
      ctx.logger.error('Failed to send request to master', {
        requestId,
        userId: requestData.userId,
        masterChatId,
        error: error instanceof Error ? error : new Error(String(error))
      });
    }
  }
}
