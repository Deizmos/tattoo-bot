import { Context } from 'telegraf';
import { DatabaseService } from '../services/database';
import { TattooRequest } from '../types';
import Logger from '../utils/logger';

interface RequestCommandContext extends Context {
  database?: DatabaseService;
  logger?: Logger;
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
export const requestSessions: { [userId: number]: any } = {};

export async function requestGlobalCommand(ctx: RequestCommandContext): Promise<void> {
  if (!ctx.from) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  const userId = ctx.from.id;
  const userInfo = ctx.from;

  // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
  const welcomeMessage = `üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ç–∞—Ç—É–∏—Ä–æ–≤–∫—É</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∏. –í–∫–ª—é—á–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:

üìù <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ:</b>
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–π —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∏
‚Ä¢ –°—Ç–∏–ª—å (—Ä–µ–∞–ª–∏–∑–º, –º–∏–Ω–∏–º–∞–ª–∏–∑–º, –æ–ª–¥—Å–∫—É–ª, –∏ —Ç.–¥.)
‚Ä¢ –†–∞–∑–º–µ—Ä (–º–∞–ª–µ–Ω—å–∫–∞—è, —Å—Ä–µ–¥–Ω—è—è, –±–æ–ª—å—à–∞—è)
‚Ä¢ –ú–µ—Å—Ç–æ –Ω–∞ —Ç–µ–ª–µ
‚Ä¢ –ë—é–¥–∂–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è)

üì∏ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚Ä¢ –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã
‚Ä¢ –£–∫–∞–∑–∞—Ç—å –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è

<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –º–∞—Å—Ç–µ—Ä—É!</b>

<i>–ü—Ä–∏–º–µ—Ä: "–•–æ—á—É —Ç–∞—Ç—É–∏—Ä–æ–≤–∫—É –¥—Ä–∞–∫–æ–Ω–∞ –≤ —Å—Ç–∏–ª–µ —Ä–µ–∞–ª–∏–∑–º –Ω–∞ –ø–ª–µ—á–µ, —Ä–∞–∑–º–µ—Ä —Å—Ä–µ–¥–Ω–∏–π, –±—é–¥–∂–µ—Ç –¥–æ 50000 —Ä—É–±–ª–µ–π"</i>`;

  await ctx.reply(welcomeMessage, { parse_mode: 'HTML' });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  requestSessions[userId] = {
    waitingForDescription: true,
    userInfo: {
      id: userInfo.id,
      username: userInfo.username,
      firstName: userInfo.first_name,
      lastName: userInfo.last_name
    },
    timestamp: Date.now()
  };

  console.log('Global request command initialized for user:', userId);
  console.log('Global session saved:', requestSessions[userId]);
}

export async function handleGlobalRequestText(ctx: RequestCommandContext): Promise<void> {
  if (!ctx.from || !('text' in ctx.message!)) {
    return;
  }

  const userId = ctx.from.id;
  const session = requestSessions[userId];

  console.log('Checking global session for user:', userId);
  console.log('Global session data:', session);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –±–æ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (session && session.waitingForDescription) {
    const description = ctx.message.text;
    
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const requestData: Omit<TattooRequest, 'id' | 'createdAt' | 'updatedAt'> = {
        userId: session.userInfo.id,
        description: description,
        status: 'pending'
      };

      if (ctx.database) {
        const requestId = await ctx.database.saveTattooRequest(requestData);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –º–∞—Å—Ç–µ—Ä—É
        await sendRequestToMasterGlobal(ctx, session.userInfo, requestId, description);
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        delete requestSessions[userId];
        
        await ctx.reply('‚úÖ <b>–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –º–∞—Å—Ç–µ—Ä—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üé®', { 
          parse_mode: 'HTML' 
        });

        console.log('Request saved and sent to master:', requestId);
      } else {
        throw new Error('Database service not available');
      }
    } catch (error) {
      console.error('Error saving request:', error);
      await ctx.reply('‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /request', { 
        parse_mode: 'HTML' 
      });
    }
  } else {
    console.log('No global session found for user:', userId);
  }
}

async function sendRequestToMasterGlobal(ctx: RequestCommandContext, userInfo: any, requestId: number, description: string): Promise<void> {
  // ID –º–∞—Å—Ç–µ—Ä–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const masterChatId = process.env.MASTER_CHAT_ID;
  
  if (!masterChatId) {
    console.error('MASTER_CHAT_ID not configured');
    return;
  }

  const masterMessage = `üé® <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–∞—Ç—É–∏—Ä–æ–≤–∫—É #${requestId}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
‚Ä¢ –ò–º—è: ${userInfo.firstName} ${userInfo.lastName || ''}
‚Ä¢ Username: ${userInfo.username ? `@${userInfo.username}` : '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ ID: ${userInfo.id}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>
${description}

üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> ${new Date().toLocaleString('ru-RU')}

üí¨ <b>–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>
<code>–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userInfo.id}: –≤–∞—à –æ—Ç–≤–µ—Ç</code>`;

  try {
    await ctx.telegram.sendMessage(masterChatId, masterMessage, { 
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { 
              text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É', 
              url: `https://t.me/${ctx.botInfo?.username}?start=reply_${userInfo.id}` 
            }
          ]
        ]
      }
    });

    if (ctx.logger) {
      ctx.logger.info('Request sent to master', {
        requestId,
        userId: userInfo.id,
        masterChatId
      });
    }
  } catch (error) {
    console.error('Error sending message to master:', error);
    if (ctx.logger) {
      ctx.logger.error('Failed to send request to master', {
        requestId,
        userId: userInfo.id,
        masterChatId,
        error: error instanceof Error ? error : new Error(String(error))
      });
    }
  }
}
