import { Telegraf } from 'telegraf';
import { message } from 'telegraf/filters';
import dotenv from 'dotenv';
import path from 'path';

import { DatabaseService } from './services/database';
import { createSessionMiddleware } from './middleware/session';
import { startCommand } from './commands/start';
import { helpCommand } from './commands/help';
import { contactCommand } from './commands/contact';
import { pricesCommand } from './commands/prices';
import { requestCommand, handleRequestText, requestSessions } from './commands/request';
import { replyCommand, handleReplyText, handleReplyCallback, replySessions } from './commands/reply';
import Logger from './utils/logger';
import { BotConfig } from './types';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

class TattooBot {
  private bot: Telegraf;
  private database: DatabaseService;
  private logger: Logger;
  private config: BotConfig;

  constructor() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (!process.env.BOT_TOKEN) {
      throw new Error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    }

    this.config = {
      token: process.env.BOT_TOKEN,
      ...(process.env.WEBHOOK_URL && { webhookUrl: process.env.WEBHOOK_URL }),
      ...(process.env.WEBHOOK_PORT && { webhookPort: parseInt(process.env.WEBHOOK_PORT) }),
      databasePath: process.env.DATABASE_PATH || (process.env.NODE_ENV === 'production' ? '/tmp/tattoo-bot.db' : './database/bot.db'),
      logLevel: process.env.LOG_LEVEL || 'info',
      ...(process.env.WEBHOOK_SECRET && { webhookSecret: process.env.WEBHOOK_SECRET }),
      ...(process.env.MASTER_CHAT_ID && { masterChatId: process.env.MASTER_CHAT_ID })
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    this.logger = new Logger(this.config.logLevel, process.env.LOG_FILE);
    this.database = new DatabaseService(this.config.databasePath);
    this.bot = new Telegraf(this.config.token);

    this.setupMiddleware();
    this.setupCommands();
    this.setupErrorHandling();
  }

  private setupMiddleware(): void {
    // Middleware –¥–ª—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.bot.use(createSessionMiddleware(this.database));

    // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    this.bot.use(async (ctx, next) => {
      const start = Date.now();
      await next();
      const ms = Date.now() - start;
      
      this.logger.info(`Processed update ${ctx.update.update_id}`, {
        ...(ctx.from?.id && { userId: ctx.from.id }),
        ...(ctx.chat?.id && { chatId: ctx.chat.id }),
        command: 'message' in ctx.update && ctx.message && 'text' in ctx.message ? ctx.message.text : 'callback'
      });
    });
  }

  private setupCommands(): void {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(startCommand);

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.help(helpCommand);

    // –ö–æ–º–∞–Ω–¥–∞ /contact
    this.bot.command('contact', contactCommand);

    // –ö–æ–º–∞–Ω–¥–∞ /prices
    this.bot.command('prices', pricesCommand);

    // –ö–æ–º–∞–Ω–¥–∞ /request
    this.bot.command('request', (ctx) => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      (ctx as any).database = this.database;
      (ctx as any).logger = this.logger;
      return requestCommand(ctx as any);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /reply (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞)
    this.bot.command('reply', (ctx) => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      (ctx as any).database = this.database;
      (ctx as any).logger = this.logger;
      return replyCommand(ctx as any);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–≤–µ—Ç–∞
    this.bot.on('callback_query', async (ctx) => {
      (ctx as any).database = this.database;
      (ctx as any).logger = this.logger;
      return handleReplyCallback(ctx as any);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on(message('text'), async (ctx) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–ø—Ä–æ—Å–∞
      const userId = ctx.from?.id;
      if (userId) {
        const sessionKey = `request_${userId}`;
        const session = (ctx as any).session?.[sessionKey];
        
        if (session && session.step) {
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
          (ctx as any).database = this.database;
          (ctx as any).logger = this.logger;
          return requestCommand(ctx as any);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /request
      if (userId) {
        const globalSession = requestSessions[userId];
        if (globalSession && globalSession.waitingForDescription) {
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
          (ctx as any).database = this.database;
          (ctx as any).logger = this.logger;
          return handleRequestText(ctx as any);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /reply (–¥–ª—è –º–∞—Å—Ç–µ—Ä–∞)
      if (userId) {
        const replySession = replySessions[userId];
        if (replySession && replySession.step === 'waiting_for_message') {
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
          (ctx as any).database = this.database;
          (ctx as any).logger = this.logger;
          return handleReplyText(ctx as any);
        }
      }

      const text = ctx.message.text.toLowerCase();
      
      if (text.includes('—Ç–∞—Ç—É') || text.includes('—Ç–∞—Ç—É–∏—Ä–æ–≤–∫')) {
        await ctx.reply('üé® –û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /request –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.');
      } else if (text.includes('—Ü–µ–Ω–∞') || text.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å')) {
        await ctx.reply('üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /prices');
      } else if (text.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || text.includes('—Å–≤—è–∑–∞—Ç—å—Å—è')) {
        await ctx.reply('üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /contact');
      } else {
        await ctx.reply('–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è —Ç–∞—Ç—É-—Å–∞–ª–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é!');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
    this.bot.on(message('sticker'), async (ctx) => {
      await ctx.reply('üòÑ –ö—Ä—É—Ç–æ–π —Å—Ç–∏–∫–µ—Ä! –ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫—É—é —Ç–∞—Ç—É–∏—Ä–æ–≤–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ?');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    this.bot.on(message('photo'), async (ctx) => {
      await ctx.reply('üì∏ –û—Ç–ª–∏—á–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è! –≠—Ç–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è –±—É–¥—É—â–µ–π —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∏? –Ø –ø–µ—Ä–µ–¥–∞–º –º–∞—Å—Ç–µ—Ä—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.');
    });
  }

  private setupErrorHandling(): void {
    this.bot.catch((err, ctx) => {
      this.logger.error(`Bot error for update ${ctx.update.update_id}`, {
        ...(ctx.from?.id && { userId: ctx.from.id }),
        ...(ctx.chat?.id && { chatId: ctx.chat.id }),
        error: err instanceof Error ? err : new Error(String(err))
      });
      
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    });
  }

  public async start(): Promise<void> {
    try {
      this.logger.info('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');

      if (this.config.webhookUrl) {
        // –ó–∞–ø—É—Å–∫ —Å webhook
        await this.bot.launch({
          webhook: {
            domain: this.config.webhookUrl,
            port: this.config.webhookPort || 3000
          }
        });
        this.logger.info(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å webhook –Ω–∞ ${this.config.webhookUrl}:${this.config.webhookPort}`);
      } else {
        // –ó–∞–ø—É—Å–∫ —Å polling
        await this.bot.launch();
        this.logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å polling');
      }

      // Graceful stop
      process.once('SIGINT', () => this.stop('SIGINT'));
      process.once('SIGTERM', () => this.stop('SIGTERM'));

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞', { 
        error: error instanceof Error ? error : new Error(String(error))
      });
      throw error;
    }
  }

  public stop(signal: string): void {
    this.logger.info(`–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
    this.bot.stop(signal);
    this.database.close();
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function main() {
  try {
    const bot = new TattooBot();
    await bot.start();
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

main();


